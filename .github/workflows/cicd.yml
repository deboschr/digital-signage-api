name: CI/CD

on:
  push:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/deboschr/digital-signage-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=sha-

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:   # <-- harus berada di dalam jobs
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy with docker-compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /home/deboschr/digital-signage-cms/digital-signage-api

            # generate .env dari GitHub Secrets
            cat > .env <<EOF
            APP_ENV=${{ secrets.APP_ENV }}
            APP_PORT=${{ secrets.APP_PORT }}
            APP_HOST=${{ secrets.APP_HOST }}
            STATIC_PATH=${{ secrets.STATIC_PATH }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_NAME=${{ secrets.DB_NAME }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            EOF

            # pull & restart service
            docker compose pull
            docker compose up -d

            # bersihkan image lama
            docker image prune -f
